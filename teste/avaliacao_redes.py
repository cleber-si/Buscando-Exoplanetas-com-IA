# -*- coding: utf-8 -*-
"""avaliacao_redes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RtjEYePF2uoLu0XVhbRXukPv4edmkfTg
"""

from google.colab import drive
drive.mount('/content/drive')

import keras
import numpy as np
import msgpack
import os
import pandas as pd
from joblib import load
import gerenciar_arqs as GA

# Para plotar figuras mais bonitas
import matplotlib as mpl
import matplotlib.pyplot as plt
mpl.rc('axes', labelsize=14)
mpl.rc('xtick', labelsize=12)
mpl.rc('ytick', labelsize=12)
plt.rcParams["figure.figsize"] = (8,8)
plt.rcParams.update({'font.size': 10})

# Métricas
from sklearn.metrics import confusion_matrix
from sklearn.metrics import precision_recall_curve
from sklearn.metrics import roc_curve
from sklearn.metrics import auc

# Carrega Arquivos
g_teste, l_teste = GA.carrega_teste()

X_g_teste, X_l_teste, y_teste = GA.ajusta_dados(g_teste, l_teste)

X_g_teste_np = np.array(X_g_teste)
X_l_teste_np = np.array(X_l_teste)
y_teste = np.array(y_teste)

X_teste = [np.concatenate([X_g_teste_np[i],X_l_teste_np[i]]) for i in range(len(X_g_teste_np))]

# Carrega os modelos
sgd_clf = load('/content/drive/MyDrive/Bolsa/Dados/Modelos/sgd_clf.joblib')
sgd_clf_A = load('/content/drive/MyDrive/Bolsa/Dados/Modelos/sgd_clf_A.joblib')

logistic_clf = load('/content/drive/MyDrive/Bolsa/Dados/Modelos/logistic_clf.joblib')
logistic_clf_A = load('/content/drive/MyDrive/Bolsa/Dados/Modelos/logistic_clf_A.joblib')

forest_clf = load('/content/drive/MyDrive/Bolsa/Dados/Modelos/forest_clf.joblib')
forest_clf_A = load('/content/drive/MyDrive/Bolsa/Dados/Modelos/forest_clf_A.joblib')

modelo = keras.models.load_model('/content/drive/MyDrive/Bolsa/Dados/Modelos/rede_bifurcada.h5')
modelo_drop = keras.models.load_model('/content/drive/MyDrive/Bolsa/Dados/Modelos/rede_bifurcada_drop.h5')

modelo_a = keras.models.load_model('/content/drive/MyDrive/Bolsa/Dados/Modelos/rede_bifurcada_A.h5')
modelo_a_drop = keras.models.load_model('/content/drive/MyDrive/Bolsa/Dados/Modelos/rede_bifurcada_A_drop.h5')

modelo_am1 = keras.models.load_model('/content/drive/MyDrive/Bolsa/Dados/Modelos/rede_bifurcada_AM1.h5')

forest_clf_AM = load('/content/drive/MyDrive/Bolsa/Dados/Modelos/forest_clf_AM.joblib')
modelo_am2 = keras.models.load_model('/content/drive/MyDrive/Bolsa/Dados/Modelos/rede_bifurcada_AM2.h5')

modelo_am3 = keras.models.load_model('/content/drive/MyDrive/Bolsa/Dados/Modelos/rede_bifurcada_AM3.h5')

modelo_am4 = keras.models.load_model('/content/drive/MyDrive/Bolsa/Dados/Modelos/rede_bifurcada_AM4.h5')

modelo_am5 = keras.models.load_model('/content/drive/MyDrive/Bolsa/Dados/Modelos/rede_bifurcada_AM5.h5')

# Modelos

#   SGD
y_scores_SGD = sgd_clf.decision_function(X_teste)
precisions_SGD, recalls_SGD, _ = precision_recall_curve(y_teste, y_scores_SGD)
fpr_SGD, tpr_SGD, _ = roc_curve(y_teste, y_scores_SGD)

#   SGD A
y_scores_SGD_A = sgd_clf_A.decision_function(X_teste)
precisions_SGD_A, recalls_SGD_A, _ = precision_recall_curve(y_teste, y_scores_SGD_A)
fpr_SGD_A, tpr_SGD_A, _ = roc_curve(y_teste, y_scores_SGD_A)

#   Regressão Logística
y_scores_logistic = logistic_clf.decision_function(X_teste)
precisions_logistic, recalls_logistic, _ = precision_recall_curve(y_teste, y_scores_logistic)
fpr_logistc, tpr_logistc, _ = roc_curve(y_teste, y_scores_logistic)

#   Regressão Logística A
y_scores_logistic_A = logistic_clf_A.decision_function(X_teste)
precisions_logistic_A, recalls_logistic_A, _ = precision_recall_curve(y_teste, y_scores_logistic_A)
fpr_logistic_A, tpr_logistic_A, _ = roc_curve(y_teste, y_scores_logistic_A)

#   Random Forest
y_probas_forest = forest_clf.predict_proba(X_teste)
y_scores_forest = y_probas_forest[:, 1] # score = proba of positive class
precisions_forest, recalls_forest, _ = precision_recall_curve(y_teste, y_scores_forest)
fpr_forest, tpr_forest, _ = roc_curve(y_teste, y_scores_forest)
importancia = forest_clf.feature_importances_

#   Random Forest A
y_probas_forest_A = forest_clf_A.predict_proba(X_teste)
y_scores_forest_A = y_probas_forest_A[:, 1] # score = proba of positive class
precisions_forest_A, recalls_forest_A, _ = precision_recall_curve(y_teste, y_scores_forest_A)
fpr_forest_A, tpr_forest_A, _ = roc_curve(y_teste, y_scores_forest_A)
importancia_A = forest_clf_A.feature_importances_

#bins = np.linspace(0,len(importancia)-1, len(importancia))

#   Random Forest AM
y_probas_forest_AM = forest_clf_AM.predict_proba(X_teste)
y_scores_forest_AM = y_probas_forest_AM[:, 1] # score = proba of positive class
precisions_forest_AM, recalls_forest_AM, _ = precision_recall_curve(y_teste, y_scores_forest_AM)
fpr_forest_AM, tpr_forest_AM, _ = roc_curve(y_teste, y_scores_forest_AM)
importancia_AM = forest_clf_AM.feature_importances_

modelos = []

modelos.append(modelo)
modelos.append(modelo_drop)
modelos.append(modelo_a)
modelos.append(modelo_a_drop)
modelos.append(modelo_am1)
modelos.append(modelo_am2)
modelos.append(modelo_am3)
modelos.append(modelo_am4)
modelos.append(modelo_am5)

y_pred = []

y_pred.append(np.argmax(modelo.predict((X_g_teste_np, X_l_teste_np)), axis=-1))
y_pred.append(np.argmax(modelo_drop.predict((X_g_teste_np, X_l_teste_np)), axis=-1))

y_pred.append(np.argmax(modelo_a.predict((X_g_teste_np, X_l_teste_np)), axis=-1))
y_pred.append(np.argmax(modelo_a_drop.predict((X_g_teste_np, X_l_teste_np)), axis=-1))

y_pred.append(np.argmax(modelo_am1.predict((X_g_teste_np, X_l_teste_np)), axis=-1))

y_pred.append(np.argmax(modelo_am2.predict((X_g_teste_np, X_l_teste_np)), axis=-1))

y_pred.append(np.argmax(modelo_am3.predict((X_g_teste_np, X_l_teste_np)), axis=-1))

y_pred.append(np.argmax(modelo_am4.predict((X_g_teste_np, X_l_teste_np)), axis=-1))

y_pred.append(np.argmax(modelo_am5.predict((X_g_teste_np, X_l_teste_np)), axis=-1))

for i in y_pred:
    print(confusion_matrix(y_teste, i))

y_pred = logistic_clf_A.predict(X_teste)
y_pred.shape

#y_pred = forest_clf_A.predict(X_teste)
#y_pred = np.argmax(modelo_am1.predict((X_g_teste_np, X_l_teste_np)), axis=-1)

acertos = 0
erros = 0

for i in range(len(y_teste)):
    if y_pred[i] == 1 and y_teste[i] == True:
        acertos += 1
        #print('Acertou')
    elif y_pred[i] == 0 and y_teste[i] == False:
        acertos += 1
        #print('Acertou')
    else:
        erros += 1
        #print('Errou')

print('Resultado: {}/{} = {}'.format(acertos, len(y_teste), acertos/len(y_teste)))

modelo_am1.evaluate((X_g_teste_np, X_l_teste_np), y_teste)

y_teste_num = [1 if item == True else 0 for item in y_teste]

total, selec = 0, 0

for t, s in zip(y_teste_num, y_pred):
    if t == 1:
        total += 1
    if s == 1:
        selec += 1
    
print('total, selec:', total, selec)

fp = 0
tp = 0

for i in range(len(y_pred)):
    if y_teste_num[i] + y_pred[i] == 1:
        fp += 1
    if y_teste_num[i] + y_pred[i] == 2:
        tp += 1

print('fp, tp:', fp, tp)

precision = tp/(tp+fp)
recall = tp/(total)

print('precision, recall:', precision, recall)

for i in y_pred:
    pre = keras.metrics.Precision()
    pre.update_state(y_teste, i)
    print(pre.result().numpy())

for i in y_pred:
    rec = keras.metrics.Recall()
    rec.update_state(y_teste, i)
    print(rec.result().numpy())

for i in y_pred:
    auc = keras.metrics.AUC(curve='PR')
    auc.update_state(y_teste, i)
    print(auc.result().numpy())

y_probas = []

for mod in modelos:
    y_probas.append(mod.predict((X_g_teste_np, X_l_teste_np)))

y_scores = []

for prob in y_probas:
    y_scores.append(prob[:, 1])

y_scores[1]

precisions = []
recalls = []
fprs = []
tprs = []

for scr in y_scores:
    pre, rec, _ = precision_recall_curve(y_teste, scr)
    fpr, tpr, _ = roc_curve(y_teste, scr)

    precisions.append(pre)
    recalls.append(rec)

    fprs.append(fprs)
    tprs.append(tpr)

for i in range(len(precisions)):
    #if i == 1 or i == 3:
    #    continue
    print('AUC:', auc(recalls[i], precisions[i]))
    plt.plot(recalls[i], precisions[i], label=str(i))

plt.legend()
#plt.ylim(bottom=0.4, top=1)
#plt.xlim(left=0.1, right=1)
plt.grid(b=True)
plt.show()

salva_figs = '/content/drive/MyDrive/Bolsa/Dados/Figuras'

# Plotagem Precisão x Recall

tam = 16

plt.rcParams["figure.figsize"] = (8,8)

cores = ['maroon', 'rebeccapurple', 'y', 'lightsalmon', 'peru', 'black', 'm', 'blue', 'orange']
leg = ['Rede Neural', 'Rede Neural com Drop', 'Rede Neural A', 'Rede Neural A com Drop',
        'Rede Neural AM1', 'Rede Neural AM2', 'Rede Neural AM3', 'Rede Neural AM4',
        'Rede Neural AM5']

for i in range(len(precisions)):
    if i == 0 or i == 1 or i == 3 or i == 7 or i == 8:
        continue
    #print('AUC:', auc(recalls[i], precisions[i]))
    #plt.plot(recalls[i], precisions[i], color=cores[i], label = leg[i])

i = 0
plt.plot(recalls[i], precisions[i], color=cores[i], label = leg[i])
plt.plot(recalls_SGD, precisions_SGD, color='steelblue', label = 'GDE')
#plt.plot(recalls_SGD_A, precisions_SGD_A, color='blue', label = 'GDE A')
plt.plot(recalls_forest, precisions_forest, color='g', label = 'Floresta Randômica')
#plt.plot(recalls_forest_A, precisions_forest_A, color='aquamarine', label = 'Floresta Randômica A')
plt.plot(recalls_logistic, precisions_logistic, color='red', label = 'Regressão Logísitica')
#plt.plot(recalls_logistic_A, precisions_logistic_A, color='m', label = 'Regressão Logísitica A')
#plt.plot(recalls_forest_AM, precisions_forest_AM, color='pink', label = 'Forest AM')


plt.xlim(left=0.2, right=1)
plt.xlabel('Recall', fontsize = tam+5)
plt.xticks(fontsize = tam)

plt.ylim(bottom=0.2, top=1)
plt.ylabel('Precisão', fontsize = tam+5)
plt.yticks(fontsize = tam)

plt.grid(b=True)
plt.legend(fontsize = tam, markerscale = 2, loc='lower left')

#plt.savefig(salva_figs+'/PxR_basico.pdf', bbox_inches = 'tight')
plt.show()

print('AUC M1:', auc(recalls[4], precisions[4]))
print('AUC M2:', auc(recalls[5], precisions[5]))
print('AUC M3:', auc(recalls[6], precisions[6]))
print('AUC SGD:', auc(recalls_SGD, precisions_SGD))
print('AUC SGDA:', auc(recalls_SGD_A, precisions_SGD_A))
print('AUC LR:', auc(recalls_logistic, precisions_logistic))
print('AUC LRA:', auc(recalls_logistic_A, precisions_logistic_A))
print('AUC FR:', auc(recalls_forest_A, precisions_forest_A))
print('AUC FRM:', auc(recalls_forest_AM, precisions_forest_AM))

# Plotagem Precisão x Recall

tam = 16

plt.rcParams["figure.figsize"] = (8,8)

cores = ['maroon', 'rebeccapurple', 'y', 'lightsalmon', 'peru', 'black', 'm', 'blue', 'orange']
leg = ['Rede Neural', 'Rede Neural com Drop', 'Rede Neural A', 'Rede Neural A com Drop',
        'Rede Neural AM1', 'Rede Neural AM2', 'Rede Neural AM3', 'Rede Neural AM4',
        'Rede Neural AM5']

for i in range(len(precisions)):
    if i == 0 or i == 1 or i == 3 or i == 7 or i == 8:
        continue
    #print('AUC:', auc(recalls[i], precisions[i]))
    #plt.plot(recalls[i], precisions[i], color=cores[i], label = leg[i])

i = 0
plt.plot(fprs[i], tprs[i], color=cores[i], label = leg[i])
plt.plot(fpr_SGD, tpr_SGD, color='steelblue', label = 'GDE')
#plt.plot(recalls_SGD_A, precisions_SGD_A, color='blue', label = 'GDE A')
plt.plot(fpr_forest, tpr_forest, color='g', label = 'Floresta Randômica')
#plt.plot(recalls_forest_A, precisions_forest_A, color='aquamarine', label = 'Floresta Randômica A')
plt.plot(fpr_logistc, tpr_logistc, color='red', label = 'Regressão Logísitica')
#plt.plot(recalls_logistic_A, precisions_logistic_A, color='m', label = 'Regressão Logísitica A')
#plt.plot(recalls_forest_AM, precisions_forest_AM, color='pink', label = 'Forest AM')


#plt.xlim(left=0.2, right=1)
plt.xlabel('TFP', fontsize = tam+5)
plt.xticks(fontsize = tam)

#plt.ylim(bottom=0.2, top=1)
plt.ylabel('TPV', fontsize = tam+5)
plt.yticks(fontsize = tam)

plt.grid(b=True)
plt.legend(fontsize = tam, markerscale = 2, loc='lower left')

#plt.savefig(salva_figs+'/PxR_basico.pdf', bbox_inches = 'tight')
plt.show()

fprs[4], tprs[4], _ = roc_curve(y_teste, y_scores[4])
fprs[5], tprs[5], _ = roc_curve(y_teste, y_scores[5])
fprs[6], tprs[6], _ = roc_curve(y_teste, y_scores[6])

modelo_am1.summary()

print('AUC M1:', auc(fprs[4], tprs[4]))
print('AUC M2:', auc(fprs[5], tprs[5]))
print('AUC M3:', auc(fprs[6], tprs[6]))
print('AUC SGD:', auc(fpr_SGD, tpr_SGD))
print('AUC SGDA:', auc(fpr_SGD_A, tpr_SGD_A))
print('AUC LR:', auc(fpr_logistc, tpr_logistc))
print('AUC LRA:', auc(fpr_logistic_A, tpr_logistic_A))
print('AUC FR:', auc(fpr_forest_A, tpr_forest_A))
print('AUC FRM:', auc(fpr_forest_AM, tpr_forest_AM))

# Plotagem Precisão x Recall

tam = 16

plt.rcParams["figure.figsize"] = (8,8)

cores = ['maroon', 'rebeccapurple', 'y', 'lightsalmon', 'peru', 'black', 'm', 'blue', 'orange']
leg = ['Rede Neural', 'Rede Neural com Drop', 'Rede Neural A', 'Rede Neural A com Drop',
        'Rede Neural AM1', 'Rede Neural AM2', 'Rede Neural AM3', 'Rede Neural AM4',
        'Rede Neural AM5']


plt.plot(fprs[0], tprs[0], color=cores[0], label = leg[0])
plt.plot(fprs[4], tprs[4], color=cores[4], label = leg[4])
plt.plot(fprs[5], tprs[5], color=cores[5], label = leg[5])
plt.plot(fprs[6], tprs[6], color=cores[6], label = leg[6])
#plt.plot(recalls_SGD, precisions_SGD, color='steelblue', label = 'GDE')
#plt.plot(recalls_SGD_A, precisions_SGD_A, color='blue', label = 'GDE A')
plt.plot(fpr_forest, tpr_forest, color='g', label = 'Floresta Randômica')
plt.plot(fpr_forest_A, tpr_forest_A, color='aquamarine', label = 'Floresta Randômica A')
#plt.plot(recalls_logistic, precisions_logistic, color='red', label = 'Regressão Logísitica')
#plt.plot(recalls_logistic_A, precisions_logistic_A, color='m', label = 'Regressão Logísitica A')
plt.plot(fpr_forest_AM, tpr_forest_AM, color='pink', label = 'Forest AM')


#plt.xlim(left=0.2, right=1)
plt.xlabel('fpr', fontsize = tam+5)
plt.xticks(fontsize = tam)

#plt.ylim(bottom=0.2, top=1)
plt.ylabel('tpr', fontsize = tam+5)
plt.yticks(fontsize = tam)

plt.grid(b=True)
plt.legend(fontsize = tam, markerscale = 2, loc='lower left')

#plt.savefig(salva_figs+'/PxR_basico.pdf', bbox_inches = 'tight')
plt.show()

# Plotagem Precisão x Recall

tam = 16

plt.rcParams["figure.figsize"] = (8,8)

cores = ['maroon', 'rebeccapurple', 'y', 'lightsalmon']
leg = ['Rede Neural', 'Rede Neural com Drop', 'Rede Neural A', 'Rede Neural A com Drop']

for i in range(len(precisions)):
    if i == 1 or i == 3:
        continue
    #print('AUC:', auc(recalls[i], precisions[i]))
    plt.plot(recalls[i], precisions[i], color=cores[i], label = leg[i])
plt.plot(recalls_SGD, precisions_SGD, color='steelblue', label = 'GDE')
plt.plot(recalls_SGD_A, precisions_SGD_A, color='blue', label = 'GDE A')
plt.plot(recalls_forest, precisions_forest, color='g', label = 'Floresta Randômica')
plt.plot(recalls_forest_A, precisions_forest_A, color='aquamarine', label = 'Floresta Randômica A')
plt.plot(recalls_logistic, precisions_logistic, color='red', label = 'Regressão Logísitica')
plt.plot(recalls_logistic_A, precisions_logistic_A, color='m', label = 'Regressão Logísitica A')
plt.plot(recalls_forest_AM, precisions_forest_AM, color='olive', label = 'Forest AM')


plt.xlim(left=0.2, right=1)
plt.xlabel('Recall', fontsize = tam+5)
plt.xticks(fontsize = tam)

plt.ylim(bottom=0.2, top=1)
plt.ylabel('Precisão', fontsize = tam+5)
plt.yticks(fontsize = tam)

plt.grid(b=True)
plt.legend(fontsize = tam, markerscale = 2, loc='lower left')

#plt.savefig(salva_figs+'/PxR_basico_A.pdf', bbox_inches = 'tight')
plt.show()

# Plotagem Precisão x Recall

tam = 16

plt.rcParams["figure.figsize"] = (8,8)

cores = ['maroon', 'rebeccapurple', 'y', 'lightsalmon']
leg = ['Rede Neural', 'Rede Neural com Drop', 'Rede Neural A', 'Rede Neural A com Drop']


plt.plot(recalls[2], precisions[2], color=cores[2], label = leg[2])
plt.plot(recalls_forest, precisions_forest, color='g', label = 'Floresta Randômica')
plt.plot(recalls_forest_A, precisions_forest_A, color='aquamarine', label = 'Floresta Randômica A')
plt.plot(recalls_forest_AM, precisions_forest_AM, color='pink', label = 'Forest AM')


plt.xlim(left=0.2, right=1)
plt.xlabel('Recall', fontsize = tam+5)
plt.xticks(fontsize = tam)

plt.ylim(bottom=0.2, top=1)
plt.ylabel('Precisão', fontsize = tam+5)
plt.yticks(fontsize = tam)

plt.grid(b=True)
plt.legend(fontsize = tam, markerscale = 2, loc='lower left')

#plt.savefig(salva_figs+'/PxR_basico_A.pdf', bbox_inches = 'tight')
plt.show()

print('RNA:', auc(recalls[2], precisions[2]))

print('FRAM:', auc(recalls_forest_AM, precisions_forest_AM))